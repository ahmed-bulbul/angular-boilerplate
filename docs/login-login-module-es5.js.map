{"version":3,"sources":["webpack:///src/app/login/login/login.component.css","webpack:///src/app/login/register/register.component.css","webpack:///src/app/login/login/login.component.html","webpack:///src/app/login/model/login.ts","webpack:///src/app/login/login.module.ts","webpack:///src/app/login/register/register.component.html","webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login/login.component.ts","webpack:///src/app/login/register/register.component.ts"],"names":["Login","LoginModule","declarations","imports","routes","path","component","LoginRoutingModule","forChild","exports","LoginComponent","formBuilder","toastr","loginService","router","spinnerService","localStorageService","baseUrl","formSubmitted","formData","isLoggedIn","navigate","_initForm","myForm","valueChanges","subscribe","data","group","username","required","password","minLength","controls","login","isLoading","console","log","setToken","setObserver","fire","icon","title","text","showConfirmButton","timer","then","error","loginStatusSubject","next","currentUserSubject","getUser","token","user","setUser","selector","template","RegisterComponent"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["export default \".custom-button{\\r\\n  background: linear-gradient(to right, #0a6323 0%, #de0f0f 100%);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/* [account-btn custom-button]   --> was default login button css class name*/\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSwrREFBK0Q7QUFDakU7Ozs7O0FBS0EsNkVBQTZFIiwiZmlsZSI6ImxvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY3VzdG9tLWJ1dHRvbntcclxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMwYTYzMjMgMCUsICNkZTBmMGYgMTAwJSk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8qIFthY2NvdW50LWJ0biBjdXN0b20tYnV0dG9uXSAgIC0tPiB3YXMgZGVmYXVsdCBsb2dpbiBidXR0b24gY3NzIGNsYXNzIG5hbWUqL1xyXG4iXX0= */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZWdpc3Rlci5jb21wb25lbnQuY3NzIn0= */\";","export default \"<div class=\\\"account-content\\\">\\n  <!-- <a routerLink=\\\"/login/joblist\\\" class=\\\"btn btn-primary apply-btn\\\">Apply Job</a> -->\\n  <div class=\\\"container\\\">\\n\\n    <!-- Account Logo -->\\n    <div class=\\\"account-logo\\\">\\n      <a href=\\\"javascript:\\\"><img src=\\\"assets/img/logo2.png\\\" alt=\\\"Walton Digi-Tech Industries Ltd \\\"></a>\\n    </div>\\n    <!-- /Account Logo -->\\n\\n    <div class=\\\"account-box\\\">\\n      <div class=\\\"account-wrapper\\\">\\n        <h3 class=\\\"account-title\\\">Login</h3>\\n        <p class=\\\"account-subtitle\\\">Welcome to Login Panel</p>\\n\\n        <!-- Account Form -->\\n        <form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"myForm\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>Username</label>\\n            <input class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': formSubmitted && f.username.errors }\\\"\\n              formControlName=\\\"username\\\" type=\\\"text\\\">\\n            <div *ngIf=\\\"formSubmitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col\\\">\\n                <label>Password</label>\\n              </div>\\n            </div>\\n            <input class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': formSubmitted && f.password.errors }\\\"\\n              formControlName=\\\"password\\\" formControlName=\\\"password\\\" type=\\\"password\\\">\\n            <div *ngIf=\\\"formSubmitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n              <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n              <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 4 characters</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group text-center\\\">\\n\\n            <button [disabled]=\\\"myForm.invalid\\\" class=\\\"btn btn-primary\\\" type=\\\"submit\\\">\\n\\n              <span *ngIf=\\\"!isLoading\\\">\\n                Login\\n              </span>\\n\\n              <span *ngIf=\\\"isLoading\\\" class=\\\"indicator-progress\\\" [style.display]=\\\"'block'\\\">\\n                Please wait...\\n                <span class=\\\"spinner-border spinner-border-sm align-middle ms-2\\\"></span>\\n              </span>\\n\\n            </button>\\n          </div>\\n          <div class=\\\"account-footer\\\">\\n            <!-- <p>Don't have an account yet? <a routerLink=\\\"/login/register\\\">Register</a></p> -->\\n          </div>\\n        </form>\\n        <!-- /Account Form -->\\n\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<!--\\n<ngx-spinner bdColor = \\\"rgba(255,255,255,0.5)\\\" size = \\\"medium\\\" color = \\\"#667eea\\\" type = \\\"ball-clip-rotate\\\" [fullScreen] = \\\"false\\\"><p style=\\\"color: black\\\" > Processing... </p></ngx-spinner> -->\\n\\n\\n<ngx-spinner bdColor = \\\"rgba(0, 0, 0, 0.8)\\\" size = \\\"medium\\\" color = \\\"#fff\\\" type = \\\"square-jelly-box\\\" [fullScreen] = \\\"true\\\"><p style=\\\"color: white\\\" > Loading... </p></ngx-spinner>\\n\";","export class Login{\n  \n  username!: string;\n  password!:string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { LoginRoutingModule } from './login-routing.module';\nimport { RegisterComponent } from './register/register.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxSpinnerModule } from \"ngx-spinner\";\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    HttpClientModule,\n    NgxSpinnerModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ]\n})\nexport class LoginModule { }\n","export default \"<!-- Main Wrapper -->\\n<div class=\\\"main-wrapper\\\">\\n    <div class=\\\"account-content\\\">\\n        <a routerLink = \\\"/login/joblist\\\" class=\\\"btn btn-primary apply-btn\\\">Apply Job</a>\\n        <div class=\\\"container\\\">\\n\\n            <!-- Account Logo -->\\n            <div class=\\\"account-logo\\\">\\n                <a routerLink=\\\"/dashboard\\\"><img src=\\\"assets/img/logo2.png\\\" alt=\\\"Dreamguy's Technologies\\\"></a>\\n            </div>\\n            <!-- /Account Logo -->\\n\\n            <div class=\\\"account-box\\\">\\n                <div class=\\\"account-wrapper\\\">\\n                    <h3 class=\\\"account-title\\\">Register</h3>\\n                    <p class=\\\"account-subtitle\\\">Access to our dashboard</p>\\n\\n                    <!-- Account Form -->\\n                    <form action=\\\"dashboard\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label>Email</label>\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\">\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label>Password</label>\\n                            <input class=\\\"form-control\\\" type=\\\"password\\\">\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <label>Repeat Password</label>\\n                            <input class=\\\"form-control\\\" type=\\\"password\\\">\\n                        </div>\\n                        <div class=\\\"form-group text-center\\\">\\n                            <button class=\\\"btn btn-primary account-btn\\\" type=\\\"submit\\\">Register</button>\\n                        </div>\\n                        <div class=\\\"account-footer\\\">\\n                            <p>Already have an account? <a routerLink = \\\"/login/login\\\">Login</a></p>\\n                        </div>\\n                    </form>\\n                    <!-- /Account Form -->\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<!-- /Main Wrapper -->\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\n\nimport { RegisterComponent } from './register/register.component';\n\n\n\nconst routes: Routes = [\n    { path: '' , component: LoginComponent },\n    {path:'register',component:RegisterComponent},\n\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","import { LocalstorageService } from './../../security/service/localstorage.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { delay } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Login } from '../model/login';\nimport { LoginService } from '../services/login.services';\nimport Swal from 'sweetalert2';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  public myForm: FormGroup;\n  public baseUrl = environment.baseUrl;\n  public formSubmitted = false;\n  public formData: Login = new Login();\n  public isLoading:boolean;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private toastr: ToastrService,\n    private loginService: LoginService,\n    private router: Router,\n    private spinnerService:NgxSpinnerService,\n    private localStorageService:LocalstorageService\n  ) { }\n\n  ngOnInit() {\n\n    if(this.localStorageService.isLoggedIn()){\n      this.router.navigate(['/dashboard/admin']);\n    }\n    this._initForm();\n\n    //myForm data assign to formData variable\n    this.myForm.valueChanges.subscribe(data => {\n      this.formData = data;\n    })\n\n  }\n\n  // Initialize form function\n  _initForm(){\n    this.myForm=this.formBuilder.group({\n      username:[\"\",Validators.required],\n      password: ['', [Validators.minLength(4),  Validators.required]],\n    });\n  }\n\n  get f() { return this.myForm.controls; }\n\n\n  onSubmit(){\n    this.login();\n\n  }\n\n  login(){\n    this.isLoading = true;\n    //set time 30 seconds\n\n    this.loginService.login(this.formData).subscribe( data =>{\n      if(data['status'] === true){\n        console.log(data['user']);\n        this.setToken(data['accessToken'],data['user']);\n        // this.loginService.loginStatusSubject.next(true);\n        this.setObserver();\n        Swal.fire({\n         // login success position right top small\n          icon: 'success',\n          title: 'Login Successful',\n          text: data['message'],\n          showConfirmButton: false,\n          timer: 1500\n        }).then(() => {\n          this.router.navigate(['/dashboard/admin']);\n        });\n        this.isLoading = false;\n      }else{\n        this.isLoading = false;\n        Swal.fire({\n          icon: 'error',\n          title: 'Login Failed',\n          text: data['message'],\n        });\n      }\n    },\n    error => {\n      this.isLoading = false;\n      console.log(error);\n    });\n  }\n\n  setObserver (){\n    this.loginService.loginStatusSubject.next(true);\n    this.loginService.currentUserSubject.next(this.localStorageService.getUser());\n  }\n\n  //set token and user\n  setToken(token:string,user:string){\n    this.localStorageService.setToken(token);\n    this.localStorageService.setUser(user);\n  }\n\n\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n}\n"]}